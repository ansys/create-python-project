# **************************************************************************************************************** #
# This workflow will install Python dependencies, and run `pytest --cov` on all files recursively from the `pytest-root-dir`
# The workflow is also configured to exit with error if minimum individual file or total pytest coverage minimum not met
# It is based on the workflow suggested here: https://github.com/marketplace/actions/pytester-cov
#
# Variables to set:
#   * pytester action:
#     * pytest-root-dir: top-level directory to recursively check all .py files for `pytest --cov`
#     * cov-omit-list: comma separated str of all files and/or dirs to ignore
#   * env:
#     * COVERAGE_SINGLE: minimum individual file coverage required
#     * COVERAGE_TOTAL: minimum total coverage required
#
# Action outputs:
#   * output-table: `pytest --cov` markdown output table
#   * cov-threshold-single-fail: `false` if any single file coverage less than `cov-threshold-single`, else `true`
#   * cov-threshold-total-fail: `false` if total coverage less than `cov-threshold-total`, else `true`
#
# Workflows used:
#   * actions/checkout@v2: checkout files to perform additional actions on
#   * alexanderdamiani/pytester-cov@v1.2.0: runs `pytest --cov` and associated functions
# **************************************************************************************************************** #

name: pytester-cov workflow

on: [push, pull_request]

jobs:
  build:

    runs-on: ubuntu-latest
    env:
      COVERAGE_SINGLE: 60
      COVERAGE_TOTAL: 60

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: pytester-cov
      id: pytester-cov
      uses: alexanderdamiani/pytester-cov@v1.2.0
      with:
        pytest-root-dir: '.'
        cov-omit-list: 'tests/*, doc/*'
        cov-threshold-single: ${{ env.COVERAGE_SINGLE }}
        cov-threshold-total: ${{ env.COVERAGE_TOTAL }}

    # - name: Coverage single fail - new issue
    #   if: ${{ steps.pytester-cov.outputs.cov-threshold-single-fail == 'true' }}
    #   uses: nashmaniac/create-issue-action@v1.1
    #   with:
    #     title: Pytest coverage single falls below minimum ${{ env.COVERAGE_SINGLE }}
    #     token: ${{secrets.GITHUB_TOKEN}}
    #     assignees: ${{github.actor}}
    #     labels: workflow-failed
    #     body: ${{ steps.pytester-cov.outputs.output-table }}

    - name: Insufficient Test Coverage; one file failed - exit
      if: ${{ steps.pytester-cov.outputs.cov-threshold-single-fail == 'true' }}
      run: |
        echo "cov single fail ${{ steps.pytester-cov.outputs.cov-threshold-single-fail }}"
        exit 1

    # - name: Coverage total fail - new issue
    #   if: ${{ steps.pytester-cov.outputs.cov-threshold-total-fail == 'true' }}
    #   uses: nashmaniac/create-issue-action@v1.1
    #   with:
    #     title: Pytest coverage total falls below minimum ${{ env.COVERAGE_TOTAL }}
    #     token: ${{secrets.GITHUB_TOKEN}}
    #     assignees: ${{github.actor}}
    #     labels: workflow-failed
    #     body: ${{ steps.pytester-cov.outputs.output-table }}

    - name: Insufficient Test Coverage; project failed - exit
      if: ${{ steps.pytester-cov.outputs.cov-threshold-total-fail == 'true' }}
      run: |
        echo "cov single fail ${{ steps.pytester-cov.outputs.cov-threshold-total-fail }}"
        exit 1

    # - name: Commit pytest coverage table
    #   uses: peter-evans/commit-comment@v1
    #   with:
    #     body: ${{ steps.pytester-cov.outputs.output-table }}
