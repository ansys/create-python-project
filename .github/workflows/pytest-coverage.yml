# **************************************************************************************************************** #
# This workflow will install Python dependencies, and run `pytest --cov` on all files recursively from the `pytest-root-dir`
# The workflow is also configured to exit with error if minimum individual file or total pytest coverage minimum not met
# It is based on the workflow suggested here: https://github.com/marketplace/actions/pytester-cov
#
# Variables to set:
#   * pytester action:
#     * pytest-root-dir: top-level directory to recursively check all .py files for `pytest --cov`
#     * cov-omit-list: comma separated str of all files and/or dirs to ignore
#   * env:
#     * COVERAGE_TOTAL: minimum total coverage required
#
# Action outputs:
#   * output-table: `pytest --cov` markdown output table
#   * cov-threshold-total-fail: `false` if total coverage less than `cov-threshold-total`, else `true`
#
# Workflows used:
#   * actions/checkout@v2: checkout files to perform additional actions on
#   * alexanderdamiani/pytester-cov@v1.2.0: runs `pytest --cov` and associated functions
# **************************************************************************************************************** #

name: Check total test coverage >= 80%

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest
    env:
      COVERAGE_TOTAL: 80

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.9
      uses: actions/setup-python@v3
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: pytester-cov3-7
      id: pytester-cov
      uses: dmitry-engineer/pytester-cov@v3.9.1-poetry
      with:
        pytest-root-dir: '.'
        cov-omit-list: 'tests/*, doc/*, src/templates/*'
        cov-threshold-total: ${{ env.COVERAGE_TOTAL }}

    - name: Insufficient Test Coverage; project failed - exit
      if: ${{ steps.pytester-cov.outputs.cov-threshold-total-fail == 'true' }}
      run: |
        echo "coverage failure ${{ steps.pytester-cov.outputs.cov-threshold-total-fail }}"
        echo "${{ steps.pytester-cov.outputs.output-table }}"
        echo "Min total coverage: ${{ env.COVERAGE_TOTAL }}"
        exit 1
